#!/usr/bin/env python

"""
A wonderful magically tool to build a development
environment for you (out of virtual machines).
"""

import collections
import os
import argparse
import logging

import shade

from builder import creator
from builder import destroyer
from builder import pprint


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--hosts",
                        help="file to read/write host"
                             " information into/from (default=%(default)s)",
                        default=os.path.join(os.getcwd(), "hosts.yaml"),
                        metavar="PATH")
    parser.add_argument("-v", "--verbose",
                        help=("run in verbose mode (may be specified more"
                              " than once to increase the verbosity)"),
                        action='count', default=0)

    subparsers = parser.add_subparsers(help='sub-command help')
    parser_destroy = subparsers.add_parser('destroy')
    parser_destroy.set_defaults(func=destroyer.destroy)

    parser_create = subparsers.add_parser('create')
    parser_create.add_argument("-i", "--image",
                               help="cent7.x image name to"
                                    " use (if not provided one will"
                                    " automatically be found)",
                               default=None)
    parser_create.add_argument("-a", "--availability-zone",
                               help="explicit availability"
                                    " to use (if not provided one will"
                                    " automatically be picked at random)",
                               default=None)
    parser_create.add_argument("-k", "--key-name",
                               help="key name to use when creating"
                                    " instance(s)", default=None)
    parser_create.set_defaults(func=creator.create)

    args = parser.parse_args()
    if args.verbose == 1:
        logging.basicConfig(level=logging.INFO)
    elif args.verbose == 2:
        logging.basicConfig(level=logging.DEBUG)
    elif args.verbose > 2:
        # Not officially used, but typically supported.
        logging.basicConfig(level=5)
    else:
        logging.basicConfig(level=logging.WARN)

    cloud = shade.openstack_cloud()
    print("Action: '%s'" % (args.func.__doc__))
    print("Cloud: ")
    blob = pprint.pformat(collections.OrderedDict([
        ('Authentication url', cloud.auth['auth_url']),
        ('Authentication token', cloud.auth_token),
        ('User', cloud.auth['username']),
        ('Project', cloud.auth['project_name']),
    ]))
    for line in blob.splitlines():
        print("  " + line)
    args.func(args, cloud)


if __name__ == '__main__':
    main()
