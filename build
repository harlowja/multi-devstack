#!/usr/bin/env python

"""
A wonderful magically tool to build a development
environment for you (out of virtual machines).
"""

from __future__ import print_function

import argparse
import collections
import logging
import os
import sys

import fasteners
import jinja2
import shade

from builder import creator
from builder import destroyer
from builder import pprint
from builder import utils

TRACE = 5


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--tracker",
                        help="file to read/write action tracking"
                             " information into/from (default=%(default)s)",
                        default=os.path.join(os.getcwd(), "tracker.log"),
                        metavar="PATH")
    parser.add_argument("-v", "--verbose",
                        help=("run in verbose mode (may be specified more"
                              " than once to increase the verbosity)"),
                        action='count', default=0)

    subparsers = parser.add_subparsers(help='sub-command help')
    destroyer.bind_subparser(subparsers)
    creator.bind_subparser(subparsers)

    args = parser.parse_args()
    if args.verbose == 1:
        logging.basicConfig(level=logging.INFO)
    elif args.verbose == 2:
        logging.basicConfig(level=logging.DEBUG)
    elif args.verbose > 2:
        # Not officially a level, but typically supported (by some projects,
        # oslo.log, taskflow, and various other python libraries).
        logging.basicConfig(level=TRACE)
    else:
        # No options provided...
        logging.basicConfig(level=logging.WARN)

    # Make this into a convenience attribute for later usage...
    args.templates = jinja2.Environment(
        undefined=jinja2.StrictUndefined,
        loader=jinja2.FileSystemLoader(args.templates)).get_template
    one_at_a_time = fasteners.InterProcessLock(".run_lock")
    gotten = one_at_a_time.acquire(blocking=False)
    if not gotten:
        print("Only one instance of this application can run"
              " at the same time.", file=sys.stderr)
        sys.exit(1)
    else:
        try:
            tracker = utils.Tracker(args.tracker)
            tracker.open()
            tracker.reload()
            try:
                cloud = shade.openstack_cloud()
                print("Action: '%s'" % (args.func.__doc__))
                print("Tracker: '%s'" % tracker.path)
                print("Cloud: ")
                blob = pprint.pformat(collections.OrderedDict([
                    ('Authentication url', cloud.auth['auth_url']),
                    ('Authentication token', cloud.auth_token),
                    ('User', cloud.auth['username']),
                    ('Project', cloud.auth['project_name']),
                ]))
                for line in blob.splitlines():
                    print("  " + line)
                args.func(args, cloud, tracker)
            finally:
                tracker.close()
        finally:
            one_at_a_time.release()


if __name__ == '__main__':
    main()
